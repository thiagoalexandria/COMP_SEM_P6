
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 08 15:57:03 GFT 2018
//----------------------------------------------------

package br.com.minic;

import br.com.minic.elementos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 08 15:57:03 GFT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\003" +
    "\002\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\011\000\002\014\012\000\002\041\002\000" +
    "\002\041\005\000\002\021\003\000\002\021\003\000\002" +
    "\042\003\000\002\042\003\000\002\006\002\000\002\006" +
    "\003\000\002\007\003\000\002\007\004\000\002\010\015" +
    "\000\002\011\002\000\002\011\003\000\002\012\005\000" +
    "\002\013\002\000\002\013\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\015" +
    "\002\000\002\015\003\000\002\016\003\000\002\016\004" +
    "\000\002\017\005\000\002\017\011\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\006\000\002\017\006\000\002\017" +
    "\010\000\002\036\002\000\002\036\003\000\002\037\005" +
    "\000\002\040\005\000\002\025\002\000\002\025\005\000" +
    "\002\032\002\000\002\032\003\000\002\032\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\006\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\004\000\002\031\005\000\002\031\006\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\033\002\000\002\033\003\000\002\034\004\000\002\034" +
    "\004\000\002\035\002\000\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\010\005\uffff\021\uffff\047\010\001\002\000" +
    "\004\002\240\001\002\000\010\005\ufffd\021\ufffd\047\010" +
    "\001\002\000\006\005\022\021\021\001\002\000\006\005" +
    "\ufffe\021\ufffe\001\002\000\004\004\011\001\002\000\004" +
    "\027\012\001\002\000\004\022\013\001\002\000\004\050" +
    "\014\001\002\000\004\052\015\001\002\000\004\031\016" +
    "\001\002\000\010\005\ufffb\021\ufffb\047\ufffb\001\002\000" +
    "\016\002\ufff3\005\027\006\043\007\044\010\034\021\213" +
    "\001\002\000\004\011\023\001\002\000\004\011\ufff6\001" +
    "\002\000\004\011\ufff7\001\002\000\004\045\024\001\002" +
    "\000\004\046\025\001\002\000\004\043\026\001\002\000" +
    "\034\005\027\006\043\007\044\010\034\012\uffe5\013\035" +
    "\014\030\015\031\016\040\017\042\022\041\043\036\044" +
    "\uffe5\001\002\000\004\022\uffe8\001\002\000\004\045\204" +
    "\001\002\000\004\045\200\001\002\000\004\022\157\001" +
    "\002\000\034\005\027\006\043\007\044\010\034\012\uffe4" +
    "\013\035\014\030\015\031\016\040\017\042\022\041\043" +
    "\036\044\uffe4\001\002\000\004\022\uffe6\001\002\000\004" +
    "\045\130\001\002\000\032\005\027\006\043\007\044\010" +
    "\034\013\035\014\030\015\031\016\040\017\042\022\041" +
    "\043\036\044\uffe5\001\002\000\006\012\121\044\ufff9\001" +
    "\002\000\004\045\115\001\002\000\004\033\112\001\002" +
    "\000\004\045\046\001\002\000\004\022\uffe9\001\002\000" +
    "\004\022\uffe7\001\002\000\034\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\022\uffe3\043\uffe3\044\uffe3\001\002\000\022\022\061" +
    "\023\047\024\056\025\050\026\053\037\054\045\062\046" +
    "\uffd1\001\002\000\020\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\046\uffb7\051\uffb7\001\002\000\010\042\uffc1\046" +
    "\uffc1\051\uffc1\001\002\000\020\036\uffbe\037\uffbe\040\071" +
    "\041\070\042\uffbe\046\uffbe\051\uffbe\001\002\000\014\036" +
    "\065\037\064\042\uffc2\046\uffc2\051\uffc2\001\002\000\004" +
    "\046\uffcf\001\002\000\014\022\061\023\047\024\056\037" +
    "\054\045\062\001\002\000\004\046\107\001\002\000\020" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\046\uffb6\051" +
    "\uffb6\001\002\000\004\046\uffd0\001\002\000\020\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\046\uffbb\051\uffbb\001" +
    "\002\000\022\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\045\075\046\uffb5\051\uffb5\001\002\000\014\022\061\023" +
    "\047\024\056\037\054\045\062\001\002\000\010\036\065" +
    "\037\064\046\066\001\002\000\014\022\061\023\047\024" +
    "\056\037\054\045\062\001\002\000\014\022\061\023\047" +
    "\024\056\037\054\045\062\001\002\000\020\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\046\uffb9\051\uffb9\001\002" +
    "\000\020\036\uffc0\037\uffc0\040\071\041\070\042\uffc0\046" +
    "\uffc0\051\uffc0\001\002\000\014\022\061\023\047\024\056" +
    "\037\054\045\062\001\002\000\014\022\061\023\047\024" +
    "\056\037\054\045\062\001\002\000\020\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\046\uffbc\051\uffbc\001\002\000" +
    "\020\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\046\uffbd" +
    "\051\uffbd\001\002\000\020\036\uffbf\037\uffbf\040\071\041" +
    "\070\042\uffbf\046\uffbf\051\uffbf\001\002\000\022\022\061" +
    "\023\047\024\056\025\050\026\076\037\054\045\062\046" +
    "\uffb4\001\002\000\006\042\103\046\uffb0\001\002\000\004" +
    "\046\uffb3\001\002\000\004\046\105\001\002\000\006\042" +
    "\103\046\uffb0\001\002\000\004\046\uffb2\001\002\000\020" +
    "\022\061\023\047\024\056\025\050\026\076\037\054\045" +
    "\062\001\002\000\004\046\uffaf\001\002\000\020\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\046\uffb8\051\uffb8\001" +
    "\002\000\004\046\uffb1\001\002\000\004\051\110\001\002" +
    "\000\036\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\043\uffdb\044\uffdb\001\002\000\020\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\046\uffba\051\uffba\001\002\000\016" +
    "\022\061\023\047\024\056\025\050\037\054\045\062\001" +
    "\002\000\004\051\114\001\002\000\036\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\022\uffda\043\uffda\044\uffda\001\002" +
    "\000\022\022\061\023\047\024\056\025\050\026\053\037" +
    "\054\045\062\046\uffd1\001\002\000\004\046\117\001\002" +
    "\000\004\051\120\001\002\000\036\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\022\uffdc\043\uffdc\044\uffdc\001\002\000" +
    "\004\023\124\001\002\000\004\044\123\001\002\000\016" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\021\ufffa\001" +
    "\002\000\004\051\125\001\002\000\004\044\ufff8\001\002" +
    "\000\004\044\127\001\002\000\036\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\012\022\134\023\136\024\135\053\131\001\002\000\004" +
    "\045\153\001\002\000\004\046\147\001\002\000\020\027" +
    "\143\030\144\031\142\032\145\034\140\035\141\046\uffcd" +
    "\001\002\000\020\027\uffcc\030\uffcc\031\uffcc\032\uffcc\034" +
    "\uffcc\035\uffcc\046\uffcc\001\002\000\020\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\034\uffca\035\uffca\046\uffca\001\002\000" +
    "\020\027\uffcb\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\046\uffcb\001\002\000\012\022\134\023\136\024\135\053" +
    "\131\001\002\000\012\022\uffc4\023\uffc4\024\uffc4\053\uffc4" +
    "\001\002\000\012\022\uffc3\023\uffc3\024\uffc3\053\uffc3\001" +
    "\002\000\012\022\uffc8\023\uffc8\024\uffc8\053\uffc8\001\002" +
    "\000\012\022\uffc6\023\uffc6\024\uffc6\053\uffc6\001\002\000" +
    "\012\022\uffc5\023\uffc5\024\uffc5\053\uffc5\001\002\000\012" +
    "\022\uffc7\023\uffc7\024\uffc7\053\uffc7\001\002\000\004\046" +
    "\uffce\001\002\000\030\005\027\006\043\007\044\010\034" +
    "\013\035\014\030\015\031\016\040\017\042\022\041\043" +
    "\036\001\002\000\036\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\151\022\uffdf\043\uffdf\044\uffdf\001\002\000\030\005\027" +
    "\006\043\007\044\010\034\013\035\014\030\015\031\016" +
    "\040\017\042\022\041\043\036\001\002\000\036\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\043\uffe0\044\uffe0" +
    "\001\002\000\012\022\134\023\136\024\135\053\131\001" +
    "\002\000\004\046\155\001\002\000\020\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\034\uffc9\035\uffc9\046\uffc9\001\002\000" +
    "\034\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\043\uffe2\044" +
    "\uffe2\001\002\000\010\033\160\042\162\051\uffd3\001\002" +
    "\000\016\022\061\023\047\024\056\025\050\037\054\045" +
    "\062\001\002\000\004\051\165\001\002\000\004\022\163" +
    "\001\002\000\006\042\162\051\uffd3\001\002\000\004\051" +
    "\uffd2\001\002\000\036\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\022\uffd9\043\uffd9\044\uffd9\001\002\000\006\042\167" +
    "\051\uffd7\001\002\000\004\022\173\001\002\000\004\051" +
    "\172\001\002\000\004\051\uffd6\001\002\000\036\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\043\uffd8\044\uffd8" +
    "\001\002\000\004\033\176\001\002\000\006\042\167\051" +
    "\uffd7\001\002\000\004\051\uffd5\001\002\000\016\022\061" +
    "\023\047\024\056\025\050\037\054\045\062\001\002\000" +
    "\006\042\uffd4\051\uffd4\001\002\000\022\022\061\023\047" +
    "\024\056\025\050\026\053\037\054\045\062\046\uffd1\001" +
    "\002\000\004\046\202\001\002\000\004\051\203\001\002" +
    "\000\036\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd" +
    "\043\uffdd\044\uffdd\001\002\000\012\022\134\023\136\024" +
    "\135\053\131\001\002\000\004\046\206\001\002\000\030" +
    "\005\027\006\043\007\044\010\034\013\035\014\030\015" +
    "\031\016\040\017\042\022\041\043\036\001\002\000\036" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\043\uffde" +
    "\044\uffde\001\002\000\004\022\ufff5\001\002\000\004\002" +
    "\ufff2\001\002\000\004\022\217\001\002\000\004\022\ufff4" +
    "\001\002\000\004\002\000\001\002\000\016\002\ufff1\005" +
    "\027\006\043\007\044\010\034\021\213\001\002\000\004" +
    "\002\ufff0\001\002\000\004\045\220\001\002\000\014\005" +
    "\027\006\043\007\044\010\034\046\uffee\001\002\000\004" +
    "\022\233\001\002\000\004\046\uffed\001\002\000\004\046" +
    "\224\001\002\000\004\043\225\001\002\000\032\005\027" +
    "\006\043\007\044\010\034\012\uffe5\013\035\014\030\015" +
    "\031\016\040\017\042\022\041\043\036\001\002\000\004" +
    "\012\227\001\002\000\016\022\061\023\047\024\056\025" +
    "\050\037\054\045\062\001\002\000\004\051\231\001\002" +
    "\000\004\044\232\001\002\000\016\002\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\021\uffef\001\002\000\006\042\235" +
    "\046\uffeb\001\002\000\004\046\uffec\001\002\000\012\005" +
    "\027\006\043\007\044\010\034\001\002\000\004\046\uffea" +
    "\001\002\000\006\005\ufffc\021\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\012\002\003\003\005\004\006\005\004\001" +
    "\001\000\002\001\001\000\006\004\236\005\004\001\001" +
    "\000\006\014\016\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\213\007\210\010\214\020\207\042\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\036\016\032\017\044\020\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\155\020\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\125\016\032\017\044" +
    "\020\031\001\001\000\004\041\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\056\027" +
    "\051\030\050\031\057\032\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\062\030\050\031\057\001\001" +
    "\000\002\001\001\000\006\030\073\031\057\001\001\000" +
    "\006\030\066\031\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\072\001\001\000\004\031\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\100\027\051\030\050\031\057\033\077\034" +
    "\076\001\001\000\004\035\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\101\001\001\000\002\001" +
    "\001\000\014\026\100\027\051\030\050\031\057\034\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\112\027\051\030\050\031\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\026\056\027\051" +
    "\030\050\031\057\032\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\131" +
    "\023\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\147\020\031\001\001\000\002\001\001\000\006" +
    "\017\151\020\031\001\001\000\002\001\001\000\006\022" +
    "\153\023\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\160\001\001\000\012\026" +
    "\165\027\051\030\050\031\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\167\037\170\001\001" +
    "\000\004\040\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\174" +
    "\037\170\001\001\000\002\001\001\000\012\026\176\027" +
    "\051\030\050\031\057\001\001\000\002\001\001\000\014" +
    "\026\056\027\051\030\050\031\057\032\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\204\023\132\001\001\000\002\001\001\000\006\017" +
    "\206\020\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\215\010\214\020\207\042\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\222\012\221\020\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\225\016\032\017\044\020\031\001\001\000\002\001\001" +
    "\000\012\026\227\027\051\030\050\031\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\233\001\001\000\002\001\001\000\006\012\235\020" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RestoParametros ::= VIRGULA Parametros 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoParametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RestoParametros ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoParametros",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Parametros ::= LITERAL_STRING RestoParametros 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Parametros ::= ExpressaoAtr RestoParametros 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ParametrosOpt ::= Parametros 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosOpt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ParametrosOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosOpt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // F ::= IDENTIFICADOR 
            {
              IExpressao RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identificador( id ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // F ::= LITERAL_PONTO_FLUTUANTE 
            {
              IExpressao RESULT =null;
		int lpfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double lpf = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralPontoFlutuante( lpf ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // F ::= LITERAL_INTEIRO 
            {
              IExpressao RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer li = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralInteiro( li ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // F ::= IDENTIFICADOR ABRE_PARENTESES ParametrosOpt FECHA_PARENTESES 
            {
              IExpressao RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // F ::= ABRE_PARENTESES ExpressaoAritmetica FECHA_PARENTESES 
            {
              IExpressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IExpressao exp = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; RESULT.setEntreParenteses( true ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // F ::= SUB F 
            {
              IExpressao RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao f = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoUnaria( "-", f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // T ::= F 
            {
              IExpressao RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao f = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // T ::= T DIV F 
            {
              IExpressao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IExpressao t = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao f = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria( t, "/", f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // T ::= T MULT F 
            {
              IExpressao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IExpressao t = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao f = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria( t, "*", f ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpressaoAritmetica ::= T 
            {
              IExpressao RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao t = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoAritmetica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpressaoAritmetica ::= ExpressaoAritmetica SUB T 
            {
              IExpressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IExpressao exp = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao t = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria( exp, "-", t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoAritmetica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpressaoAritmetica ::= ExpressaoAritmetica SOMA T 
            {
              IExpressao RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IExpressao exp = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao t = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpressaoBinaria( exp, "+", t ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoAritmetica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpressaoAtr ::= LITERAL_CHAR 
            {
              IExpressao RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char lc = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralChar( lc ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoAtr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpressaoAtr ::= ExpressaoAritmetica 
            {
              IExpressao RESULT =null;
		int expAritmeticaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expAritmeticaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao expAritmetica = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expAritmetica; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoAtr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperadorRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperadorRelacional ::= IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadorRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadorRelacional ::= MENOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadorRelacional ::= MAIOR_IGUAL 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadorRelacional ::= MAIOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpressaoRelacionalAux ::= NEGACAO ABRE_PARENTESES ExpressaoRelacional FECHA_PARENTESES 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacionalAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpressaoRelacionalAux ::= LITERAL_PONTO_FLUTUANTE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacionalAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpressaoRelacionalAux ::= LITERAL_INTEIRO 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacionalAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpressaoRelacionalAux ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacionalAux",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpressaoRelacional ::= ExpressaoRelacionalAux 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpressaoRelacional ::= ExpressaoRelacionalAux OperadorRelacional ExpressaoRelacionalAux 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expressao ::= LITERAL_STRING 
            {
              IExpressao RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralString( ls ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expressao ::= ExpressaoAtr 
            {
              IExpressao RESULT =null;
		int expATRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expATRright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IExpressao expATR = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expATR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expressao ::= 
            {
              IExpressao RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DeclIDOpt ::= VIRGULA IDENTIFICADOR DeclIDOpt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDOpt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DeclIDOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDOpt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DeclIDAtr ::= IDENTIFICADOR ATRIBUICAO ExpressaoAtr 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDAtr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DeclIDAtrs ::= VIRGULA DeclIDAtr DeclIDAtrOpt 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDAtrs",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DeclIDAtrOpt ::= DeclIDAtrs 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDAtrOpt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DeclIDAtrOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIDAtrOpt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Comando ::= Tipo IDENTIFICADOR ATRIBUICAO ExpressaoAtr DeclIDAtrOpt PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Comando ::= Tipo IDENTIFICADOR DeclIDOpt PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comando ::= IDENTIFICADOR ATRIBUICAO ExpressaoAtr PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Comando ::= PRINTSTR ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Comando ::= PRINTINT ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Comando ::= PRINTF ABRE_PARENTESES Expressao FECHA_PARENTESES PONTO_VIRGULA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Comando ::= WHILE ABRE_PARENTESES ExpressaoRelacional FECHA_PARENTESES Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Comando ::= IF ABRE_PARENTESES ExpressaoRelacional FECHA_PARENTESES Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Comando ::= IF ABRE_PARENTESES ExpressaoRelacional FECHA_PARENTESES Comando ELSE Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Comando ::= ABRE_CHAVE ComandosOpt FECHA_CHAVE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ComandosList ::= ComandosList Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandosList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ComandosList ::= Comando 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandosList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ComandosOpt ::= ComandosList 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandosOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ComandosOpt ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandosOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RestoListaArgumentos ::= VIRGULA ParametrosDeclaracao 
            {
              java.util.List<DeclaracaoParametro> RESULT =null;
		int restoParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restoParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoParametro> restoParametros = (java.util.List<DeclaracaoParametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = restoParametros; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RestoListaArgumentos ::= 
            {
              java.util.List<DeclaracaoParametro> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RestoListaArgumentos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParametrosDeclaracao ::= Tipo IDENTIFICADOR RestoListaArgumentos 
            {
              java.util.List<DeclaracaoParametro> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restoParametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restoParametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoParametro> restoParametros = (java.util.List<DeclaracaoParametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

  RESULT = new java.util.ArrayList<DeclaracaoParametro>(); 
  
  RESULT.add( new DeclaracaoParametro( tipo, new Identificador( identificador ) ) ); 
  
  if( restoParametros != null ) { 
   
    RESULT.addAll( restoParametros ); 
  
  }  
  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParametrosDeclaracaoOpt ::= ParametrosDeclaracao 
            {
              java.util.List<DeclaracaoParametro> RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoParametro> parametros = (java.util.List<DeclaracaoParametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parametros; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracaoOpt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParametrosDeclaracaoOpt ::= 
            {
              java.util.List<DeclaracaoParametro> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParametrosDeclaracaoOpt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DeclFuncao ::= TipoExpressao IDENTIFICADOR ABRE_PARENTESES ParametrosDeclaracaoOpt FECHA_PARENTESES ABRE_CHAVE ComandosOpt RETURN ExpressaoAtr PONTO_VIRGULA FECHA_CHAVE 
            {
              DeclaracaoFuncao RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		TipoMain tipo = (TipoMain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		java.util.List<DeclaracaoParametro> parametros = (java.util.List<DeclaracaoParametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expressaoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expressaoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IExpressao expressao = (IExpressao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DeclaracaoFuncao( tipo, identificador, parametros, expressao ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DeclFuncoesList ::= DeclFuncao DeclFuncoesList 
            {
              java.util.List<DeclaracaoFuncao> RESULT =null;
		int declFuncaoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declFuncaoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracaoFuncao declFuncao = (DeclaracaoFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funcoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoFuncao> funcoes = (java.util.List<DeclaracaoFuncao>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funcoes; RESULT.add( declFuncao ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncoesList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclFuncoesList ::= DeclFuncao 
            {
              java.util.List<DeclaracaoFuncao> RESULT =null;
		int declFuncaoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declFuncaoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclaracaoFuncao declFuncao = (DeclaracaoFuncao)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new java.util.ArrayList<DeclaracaoFuncao>(); RESULT.add( declFuncao ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncoesList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclFuncoesOpt ::= DeclFuncoesList 
            {
              java.util.List<DeclaracaoFuncao> RESULT =null;
		int funcoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoFuncao> funcoes = (java.util.List<DeclaracaoFuncao>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funcoes; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncoesOpt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclFuncoesOpt ::= 
            {
              java.util.List<DeclaracaoFuncao> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclFuncoesOpt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoExpressao ::= VOID 
            {
              TipoMain RESULT =null;
		 RESULT = new TipoMain( "void" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoExpressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoExpressao ::= Tipo 
            {
              TipoMain RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoMain( tipo ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoExpressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoMain ::= VOID 
            {
              TipoMain RESULT =null;
		 RESULT = new TipoMain( "void" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoMain",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoMain ::= INT 
            {
              TipoMain RESULT =null;
		 RESULT = new TipoMain( "int" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoMain",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RETURNOpt ::= RETURN LITERAL_INTEIRO PONTO_VIRGULA 
            {
              TipoRetorno RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer li = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TipoRetorno( "int", li ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNOpt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RETURNOpt ::= 
            {
              TipoRetorno RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNOpt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FuncaoMain ::= TipoMain MAIN ABRE_PARENTESES FECHA_PARENTESES ABRE_CHAVE ComandosOpt RETURNOpt FECHA_CHAVE 
            {
              FuncaoMain RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TipoMain tipo = (TipoMain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno retorno = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncaoMain( tipo, retorno ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncaoMain",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclInclude ::= JOGO_DA_VELHA INCLUDE MENOR IDENTIFICADOR PONTO LETRA_H MAIOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclInclude",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclIncludeList ::= DeclInclude DeclIncludeList 
            {
              Object RESULT =null;
		int declIncludeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declIncluderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object declInclude = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int includesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int includesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object includes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclIncludeList ::= DeclInclude 
            {
              Object RESULT =null;
		int declIncludeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declIncluderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declInclude = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclIncludeOpt ::= DeclIncludeList 
            {
              Object RESULT =null;
		int includesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int includesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object includes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclIncludeOpt ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclIncludeOpt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ProgramaMiniC ::= DeclIncludeOpt FuncaoMain DeclFuncoesOpt 
            {
              ProgramaMiniC RESULT =null;
		int funcaoMainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcaoMainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncaoMain funcaoMain = (FuncaoMain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declFuncoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declFuncoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.util.List<DeclaracaoFuncao> declFuncoes = (java.util.List<DeclaracaoFuncao>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramaMiniC( funcaoMain, declFuncoes ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramaMiniC",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ProgramaMiniC EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramaMiniC start_val = (ProgramaMiniC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

